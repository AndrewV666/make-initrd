#!/bin/sh -efu

. shell-error
. shell-getopt
. shell-args

PROG="${0##*/}"
TEMPDIR=
BOOTDIR="@BOOTDIR@"
SYSFS_PATH="${SYSFS_PATH:-/sys}"
KERNEL="$(uname -r)"
VERBOSE=
no_checks=

print_version() {
	cat <<-EOF
	make-initrd version @VERSION@
	Written by Alexey Gladkov, Kirill Shutemov.

	Copyright (C) 2009,2010  Alexey Gladkov <gladkov.alexey@gmail.com>
	Copyright (C) 2009,2010  Kirill A. Shutemov <kirill@shutemov.name>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_help() {
	cat <<-EOF

	Usage: make-initrd [<option>]

	make-initrd is a new, uevent-driven initramfs
	infrastructure based around udev.

	Without options, the program generates images
	for all the configuration files.

	Options:
	   guess-config           guesses the current configuration
	                          and generates the config file;
	   bug-report             makes the archive for developers
	                          when bug happens;
	   -N, --no-checks        don't check /dev, /proc and the kernel
	                          modules directory;
	   -b, --bootdir=DIR      set boot directory (default: $BOOTDIR);
	   -k, --kernel=VERSION   set kernel version (default: $KERNEL);
	   -v, --verbose          print a message for each action;
	   -V, --version          output version information and exit;
	   -h, --help             display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

exit_handler() {
	[ -z "$TEMPDIR" ] || rm -rf -- "$TEMPDIR"
	exit 1
}

# Check WORKDIR for 'noexec' mount option.
check_noexec() {
	local rc=0
	printf '#!/bin/sh\nexit 0\n' > "$TEMPDIR/check"

	if ! chmod 700 -- "$TEMPDIR/check"; then
		rc=1
	fi

	if [ "$rc" = 0 ] && [ ! -x "$TEMPDIR/check" ]; then
		message "$WORKDIR: Unable to check executable bit"
		rc=1
	fi

	if [ "$rc" = 0 ] && ! "$TEMPDIR/check"; then
		message "$WORKDIR: Unable to execute script in this directory"
		rc=1
	fi

	rm -f -- "$TEMPDIR/check"
	return $rc
}

TEMP=`getopt -n $PROG -o 'b:,k:,N,h,v,V' -l 'bootdir:,kernel:,no-checks,help,verbose,version' -- "$@"` ||
	show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
		-b|--bootdir) shift
			BOOTDIR="$(opt_check_dir --bootdir "$1")"
			;;
		-k|--kernel) shift
			[ -z "$1" ] || KERNEL="$1"
			;;
		-N|--no-checks)
			no_checks=1
			;;
		-h|--help)
			show_help
			;;
		-v|--verbose)
			VERBOSE=1
			;;
		-V|--version)
			print_version
			;;
		--) shift
			break
			;;
		*)
			fatal "Unknown option: $1"
			;;
	esac
	shift
done

if [ -z "$no_checks" ]; then
	[ -r "/lib/modules/$KERNEL" ] ||
		fatal "/lib/modules/$KERNEL: Not readable"

	[ -d "/lib/modules/$KERNEL" ] ||
		fatal "/lib/modules/$KERNEL: Not a directory"

	[ -e "/dev/null" ] ||
		fatal "/dev: Not available"

	[ -r "/proc/mounts" ] ||
		fatal "/proc/mounts: Not readable"

	grep -qs " $SYSFS_PATH sysfs " /proc/mounts ||
		fatal "$SYSFS_PATH: Not mounted"
fi

WORKDIR="${INITRD_WORKDIR-}"
WORKDIR="${WORKDIR:-${TMPDIR-}}"
WORKDIR="${WORKDIR:-/tmp}"

[ -d "$WORKDIR" ] ||
	fatal "$WORKDIR: Not a directory"

TEMPDIR="$(mktemp -d "$WORKDIR/$PROG.XXXXXXXXX")"
trap exit_handler HUP INT QUIT TERM

if ! check_noexec; then
	message "Perhaps 'noexec' mount option used?"
	rm -rf -- "$TEMPDIR"
	exit 1
fi

export TEMPDIR KERNEL BOOTDIR VERBOSE
unset MAKELEVEL

rc=0
make -r -f @PREFIX@/make-initrd.mk -- "$@" || rc=$?

[ -z "$TEMPDIR" ] ||
	rmdir -- "$TEMPDIR" 2>/dev/null ||:

exit $rc
