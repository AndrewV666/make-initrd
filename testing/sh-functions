#!/bin/bash

workdir="$topdir/testing/cache"
logdir="$topdir/testing/logs"
statusdir="$topdir/testing/status"

PROG="${0##*/}"
TEST=
message()
{
	printf >&2 '%s%s: %s\n' "$PROG" "${TEST:+ ($TESTNAME)}" "$*"
}

fatal()
{
	message "$*"
	exit 1
}

gh_group_start()
{
	echo "::group::$*"
}

gh_group_end()
{
	echo "::endgroup::"
}

run()
{
	message "run: $*"
	"$@"
}

cat_exec()
{
	cat > "$1"
	chmod +x "$1"
}

valid_log()
{
	if grep -qse '^IT WORKS!' "$2"; then
		message "$1 DONE"
		return 0
	else
		message "$1 FAIL"
		return 1
	fi
}

test_failed()
{
	[ ! -d "$statusdir" ] ||
		echo FAIL > "$statusdir/$VENDOR-$TESTNAME"
	printf '\n\n'
	printf 'FAIL %s\n' "$VENDOR-$TESTNAME"
	printf '\n\n'
}

test_passed()
{
	[ ! -d "$statusdir" ] ||
		echo PASS > "$statusdir/$VENDOR-$TESTNAME"
	printf '\n\n'
	printf 'PASS %s\n' "$VENDOR-$TESTNAME"
	printf '\n\n'
}

exit_handler()
{
	trap - EXIT
	if [ "$1" = 0 ]; then
		test_passed
	else
		test_failed
	fi
	exit $1
}

qemu_args()
{
	printf -- 'qemu_args+=("%s")\n' "$@"
}

prepare_testsuite()
{
	mkdir -p -- \
		"$workdir" \
		"$logdir" \
		"$statusdir"
	echo FAILED \
		> "$statusdir/$VENDOR-$TESTNAME"
	if [ -e "$topdir/testing/$TESTNAME.cfg" ]; then
		sed \
			-e "s#@CMDLINE@#$BOOT_CMDLINE#g" \
			\
			"$topdir/testing/testing-$VENDOR-ks-sysimage.cfg" \
			"$topdir/testing/$TESTNAME.cfg" \
			"$topdir/testing/testing-$VENDOR-ks-initrd.cfg" \
			"$topdir/testing/testing-$VENDOR-ks-done.cfg" \
			\
			> "$workdir/ks.cfg"
	fi

	if [ -c /dev/kvm ]; then
		qemu_args -enable-kvm -cpu host
	fi > "$workdir/qemu-cpu"

	qemu_args \
			-nographic \
			-serial chardev:stdio \
			-chardev stdio,mux=on,id=stdio,signal=off \
			-mon chardev=stdio,mode=readline \
		> "$workdir/qemu-stdout"
}

convert_sysimage_ext3()
{
	local sysimage_tar="$1"; shift
	local sysimage_img="$1"; shift

	sz_block=4096
	n_blocks=$(( $(stat -c %s "$sysimage_tar") / $sz_block ))
	n_inodes=$(tar -tf "$sysimage_tar" | wc -l)

	blocks=$(( $n_blocks + ( ( $n_blocks * 30 ) / 100 ) ))

	(
		flock -e 0

		run genext2fs -z -N $n_inodes -B $sz_block -b $blocks \
			-L SYSIMAGE -a "$sysimage_tar" \
			"$sysimage_img"

		run /sbin/tune2fs \
			-O dir_index,has_journal,uninit_bg \
			"$sysimage_img"
	) < "$0"

	qemu_args \
	 -blockdev "driver=file,node-name=sysimage,filename=$sysimage_img" \
	 -device "virtio-blk,drive=sysimage" \
	> "$top_workdir/qemu-sysimage"
}

trap 'exit_handler $?' EXIT HUP INT QUIT TERM
