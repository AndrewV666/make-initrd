#!/bin/bash

. /.initrd/initenv
. uevent-sh-functions
. initrd-sh-functions
. rdshell-sh-functions

mnt="/mnt/luks-key"
tab='	'
pkcs11_luks_key="/tmp/pkcs11-luks.key"


match_dev_in_array() {
	[ "$#" = 2 ] || return 2

	local value array_name array_size

	array_name="$1"
	value="$2"

	eval "array_size=\"\${$array_name-}\""

	[ -n "$array_size" ] && [ "$array_size" != 0 ] ||
		return 1

	local i luksdev realdev

	i=0
	while [ "$i" -lt "$array_size" ]; do
		eval "luksdev=\"\$$array_name$i\""
		i=$(($i + 1))

		realdev=
		get_dev realdev "$luksdev"

		[ "$realdev" != "$value" ] ||
			return 0
	done

	return 1
}

read_pkcs11_key() {
	local keyid="$1"

	keyid=${keyid#pkcs11:}
	keyid="${keyid%;};"

	local serial id label application_label module type output_file flags rc=1
	export id application_label module type output_file flags

	while [ "$keyid" ]; do
		local v="${keyid%%;*}"

		case "$v" in
			"serial="*|"id="*|"label="*) ;;
			*) fatal "Unknown PKCS#11 object identifier" ;;
		esac

		local "${v%%=*}"="${v#*=}"

		keyid="${keyid#*;}"
	done

	. smart-card

	check_for_smart_card "$serial" || return 2

	path="$pkcs11_luks_key"

	id="$id"
	application_label="$label"
	module="$(get_pkcs11_module)"
	type="data"
	output_file="$path"
	flags="-l -r"
	if plymouth --ping 2>/dev/null; then
		add_new_line="true"\
		plymouth ask-for-password \
                                --prompt "Please enter passphrase for smart card:" \
                                --number-of-tries=3 \
                                --command="pkcs11-tool-wrapper"
		rc=$?
	else
		rc=1
                while [ "$rc" != "0" ]; do
			pkcs11-tool-wrapper
			rc="$?"
                done
	fi

	return "$rc"
}

freekey() {
	[ -d "$mnt" ] && umount "$mnt" && rmdir "$mnt" ||:
	rm -f "$pkcs11_luks_key"
}

findkey() {
	local path keydev luksdev prefix s v

	while IFS='' read -u 3 -r s; do
		for n in path keydev luksdev; do
			v=
			if [ -n "$s" ] && [ -z "${s##*$tab*}" ]; then
				v="${s%%$tab*}"
				s="${s#*$tab}"
			else
				v="$s"
				s=
			fi
			eval "$n=\"\$v\""
		done

		if [ -z "$path" ]; then
			printf "ERROR(luks): path required.\n" >&2
			return 1
		fi

		if [ -n "$luksdev" ]; then
			get_dev "$luksdev" ||
				continue

			[ "${luksdev#/dev/}" = "${LUKS_ROOT#/dev/}" ] || continue
		fi


		prefix=
		if [ -n "$keydev" ]; then
			mkdir -p -- "$mnt"
			mount -r "$keydev" "$mnt" ||
				return 1
			prefix=$mnt
		fi

		if [[ "$path" = "pkcs11:"* ]]; then
			local pkcs11_id="$path"
			# assign path variable inside
			read_pkcs11_key "$pkcs11_id"
			local rc=$?
			[ "$rc" == "2" ] && printf "No smart card found\n" >&2 && return $rc
			[ "$rc" != "0" ] && printf "ERROR(luks): can't read key '%s' from smart card\n" "$pkcs11_id" >&2 && return $rc
		fi

		if [ ! -f "$prefix/$path" ]; then
			printf "ERROR(luks): %s: keyfile not found.\n" "$path" >&2
			return 1
		fi

		keyfile="$prefix/$path"

		printf "Found keyfile '%s' for '%s' encrypted partition.\n" "$path" "${LUKS_ROOT#/dev/}"
		return 0

	done 3< /etc/luks.keys

	# Keyfile not found yet.
	return 2
}

readkey() {
	local keyfile="$1"

	[ -s "$keyfile" ] ||
		return 0
	case "${LUKS_KEY_FORMAT:-plain}" in
		plain)
			local last

			last="$(printf .; tail -c -1 "$keyfile"; printf .;)"
			last="${last#.}"
			last="${last%.}"

			if [ "$last" = $'\n' ]; then
				head -c -1 < "$keyfile"
			else
				cat "$keyfile"
			fi
			;;
		raw)
			cat "$keyfile"
			;;
	esac
}

handler() {
	volume="${LUKS_ROOT##*/}-luks"

	# skip if $volume has already exist
	! dmsetup info "$volume" >/dev/null 2>&1 ||
		exit 0

	! match_dev_in_array LUKS_IGNORE "$LUKS_ROOT" ||
		exit 0

	luks_args=()
	! match_dev_in_array LUKS_DISCARD "$LUKS_ROOT" ||
		luks_args+=(--allow-discards)

	local rc=0 keyfile=''

	if [ -f /etc/luks.keys ]; then
		findkey ||
			rc="$?"
		[ "$rc" != 0 ] ||
			{ readkey "$keyfile" |cryptsetup "${luks_args[@]}" -d- luksOpen "$LUKS_ROOT" "$volume"; } ||
			rc="$?"
		freekey
	else
		if plymouth --ping 2>/dev/null; then
			plymouth ask-for-password \
				--prompt "Please enter passphrase for $LUKS_ROOT:" \
				--number-of-tries=3 \
				--command="cryptsetup ${luks_args[*]} luksOpen $LUKS_ROOT $volume"
			rc="$?"
		else
			rc=2
			# WARNING: Wait decrypt forever!
			while [ "$rc" = 2 ]; do
				cryptsetup "${luks_args[@]}" luksOpen "$LUKS_ROOT" "$volume"
				rc="$?"
			done
		fi
	fi

	if [ "$rc" != 0 ]; then
		printf 'ERROR(luks): %s: unable to activate LUKS (rc=%s)\n' "$LUKS_ROOT" "$rc" >&2
		exit 1
	fi
}

while ! console_lock; do
	sleep 0.5
done

exec 0</dev/console >/dev/console 2>&1

rc=0
for e in "$eventdir"/luks.*; do
	[ -f "$e" ] || break
	r=0
	( . "$e"; handler; ) || r="$?"
	case "$r" in
		2) ;;
		1) rc=1 ;;
		0) done_event "$e" ;;
	esac
done

console_unlock
exit $rc
