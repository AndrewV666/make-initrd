PACKAGE_NAME    := @PACKAGE_NAME@
PACKAGE_VERSION := @PACKAGE_VERSION@

MKLOCAL := @MKLOCAL@

prefix      = @prefix@
exec_prefix = @exec_prefix@
sysconfdir  = @sysconfdir@
bootdir     = @bootdir@
bindir      = @bindir@
sbindir     = @sbindir@
libexecdir  = @libexecdir@
execdir     = @libexecdir@/@PACKAGE_NAME@
statedir    = @localstatedir@
runtimedir  = @runtimedir@
datarootdir = @datarootdir@
datadir     = @datadir@
infodir     = @infodir@
mandir      = @mandir@
man1dir     = $(mandir)/man1
tmpdir      = /tmp
projectdir  = @projectdir@
rulesdir    = ${projectdir}/mk

feature_kbd_kbddir := @kbddir@

localbuilddir =
build_prefix = .build

ifneq ($(MKLOCAL),no)
localbuilddir = $(CURDIR)/$(build_prefix)/dest
statedir = /tmp
endif


OBJDIR = $(build_prefix)/obj

dest_projectdir   := $(build_prefix)/dest$(projectdir)
dest_sysconfdir   := $(build_prefix)/dest$(sysconfdir)
dest_bindir       := $(build_prefix)/dest$(bindir)
dest_sbindir      := $(build_prefix)/dest$(sbindir)
dest_execdir      := $(build_prefix)/dest$(execdir)
dest_man1dir      := $(build_prefix)/dest$(man1dir)
dest_rulesdir     := $(build_prefix)/dest$(rulesdir)
dest_datadir      := $(build_prefix)/dest$(runtimedir)
dest_data_bindir  := $(dest_datadir)/bin
dest_data_sbindir := $(dest_datadir)/sbin

HAVE_GZIP        := @HAVE_GZIP@
HAVE_GZIP_LIBS   := @HAVE_GZIP_LIBS@
HAVE_GZIP_CFLAGS := @HAVE_GZIP_CFLAGS@

HAVE_BZIP2        := @HAVE_BZIP2@
HAVE_BZIP2_LIBS   := @HAVE_BZIP2_LIBS@
HAVE_BZIP2_CFLAGS := @HAVE_BZIP2_CFLAGS@

HAVE_LZMA        := @HAVE_LZMA@
HAVE_LZMA_LIBS   := @HAVE_LZMA_LIBS@
HAVE_LZMA_CFLAGS := @HAVE_LZMA_CFLAGS@

HAVE_ZSTD        := @HAVE_ZSTD@
HAVE_ZSTD_LIBS   := @HAVE_ZSTD_LIBS@
HAVE_ZSTD_CFLAGS := @HAVE_ZSTD_CFLAGS@

HAVE_LIBKMOD        := @HAVE_LIBKMOD@
HAVE_LIBKMOD_LIBS   := @HAVE_LIBKMOD_LIBS@
HAVE_LIBKMOD_CFLAGS := @HAVE_LIBKMOD_CFLAGS@

HAVE_LIBELF        := @HAVE_LIBELF@
HAVE_LIBELF_LIBS   := @HAVE_LIBELF_LIBS@
HAVE_LIBELF_CFLAGS := @HAVE_LIBELF_CFLAGS@

VERBOSE ?= $(V)
Q = $(if $(VERBOSE),,@)
NULL :=

PROGS     =
SCRIPTS   =
C_SOURCES =

-include \
	$(wildcard utils/*/Makefile.mk) \
	$(wildcard datasrc/*/Makefile.mk)

define VAR_c_CFLAGS =
$(1)_c_CFLAGS = $(2)
endef

$(foreach name,$(PROGS),\
	$(foreach src,$($(subst -,_,$(notdir $(name)))_SRCS),\
		$(eval $(call VAR_c_CFLAGS,\
			$(basename $(subst -,_,$(notdir $(src)))),\
			$($(subst -,_,$(notdir $(name)))_CFLAGS)))))

get_objects = $(foreach name,$(filter %.c,$(1)),$(OBJDIR)/$(name:.c=.o))
get_depends = $(foreach name,$(filter %.c,$(1)),$(OBJDIR)/$(name:.c=.d))
quiet_cmd   = $(if $(VERBOSE),$(3),$(Q)printf "  %-07s%s\n" "$(1)" $(2); $(3))

PATH       = $(dest_sbindir):$(dest_bindir):$(shell echo $$PATH)
OBJS       = $(call get_objects,$(C_SOURCES))
DEPS       = $(call get_depends,$(C_SOURCES))
RULESFILES = $(addprefix $(dest_rulesdir)/,$(patsubst mk/%.in,%,$(wildcard mk/*.mk.in)))
MANPAGES   = $(addprefix $(dest_man1dir)/,$(notdir $(basename $(wildcard man/*.1.inc))))
DATAFILES  = \
	$(addprefix $(dest_projectdir)/,data guess features tools kmodule.deps.d) \
	$(addprefix $(dest_sysconfdir)/,$(patsubst conf/%,%,$(wildcard conf/*)))

CFLAGS = @CFLAGS@ \
	-Wall -Wextra -W -Wshadow -Wcast-align \
	-Wwrite-strings -Wconversion -Waggregate-return -Wstrict-prototypes \
	-Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn \
	-Wmissing-format-attribute -Wredundant-decls -Wdisabled-optimization \
	-Wno-pointer-arith \
	-Werror=shadow -Werror=missing-prototypes -Werror=implicit-function-declaration

CPPFLAGS += @CPPFLAGS@ @DEFS@ -I$(CURDIR) -I$(CURDIR)/utils

WHICH		= @WHICH@
WHICH_ARGS	= --skip-alias --skip-functions --skip-dot --skip-tilde
EGREP		= @EGREP@
UDEVD		= @UDEVD@
UDEVADM		= @UDEVADM@

SEDsubst = @SED@ \
	-e 's|@WHICH[@]|$(WHICH)|g' \
	-e 's|@WHICH_ARGS[@]|$(WHICH_ARGS)|g' \
	-e 's|@EGREP[@]|$(EGREP)|g' \
	-e 's|@UDEVD[@]|$(UDEVD)|g' \
	-e 's|@UDEVADM[@]|$(UDEVADM)|g' \
	-e 's|@PACKAGE_NAME[@]|$(PACKAGE_NAME)|g' \
	-e 's|@PACKAGE_VERSION[@]|$(PACKAGE_VERSION)|g' \
	-e 's|@bootdir[@]|$(bootdir)|g' \
	-e 's|@sysconfdir[@]|$(sysconfdir)|g' \
	-e 's|@datadir[@]|$(datadir)|g' \
	-e 's|@libdir[@]|$(libdir)|g' \
	-e 's|@statedir[@]|$(statedir)|g' \
	-e 's|@feature_kbd_kbddir[@]|$(feature_kbd_kbddir)|g' \
	-e 's|@projectdir[@]|$(localbuilddir)$(projectdir)|g' \
	-e 's|@localbuilddir[@]|$(localbuilddir)|g' \
	-e 's|@execdir[@]|$(localbuilddir)$(execdir)|g'

CP       = $(Q)cp -a
RM       = $(Q)rm -f
LN_S     = $(Q)@LN_S@ -f
CHMOD    = $(Q)chmod
MKDIR_P  = $(Q)@MKDIR_P@
TOUCH_R  = $(Q)touch -r
GEN      = $(call quiet_cmd,GEN,$@,$(CURDIR)/config.status -q)
SED      = $(call quiet_cmd,SED,$@,$(SEDsubst))
HELP2MAN = $(call quiet_cmd,MAN,$@,env -i PATH="${PATH}" @HELP2MAN@ -N)
COMPILE  = $(call quiet_cmd,CC,$<,$(COMPILE.c))
LINK     = $(call quiet_cmd,CCLD,$@,$(LINK.o))
DEP      = $(call quiet_cmd,DEP,$<,$(CC))

all: build

build: build-progs build-rules build-data

build-progs: $(OBJS) $(PROGS) $(SCRIPTS)

ifneq ($(HELP2MAN),)
build-manpages: build-progs $(MANPAGES)
build: build-manpages
endif

build-rules: $(RULESFILES)

build-data: $(DATAFILES)
	$(MKDIR_P) -- $(dest_data_bindir)
	$(LN_S) -- environ $(dest_data_bindir)/showenv

install: build-progs build-manpages
	@root="$(CURDIR)/$(build_prefix)/dest"; \
	find "$$root" -mindepth 1 | sort -d | while read -r n; do \
	  dst="$(DESTDIR)/$${n##$$root/}"; \
	  if [ ! -L "$$n" ] && [ -d "$$n" ]; then \
	    mkdir -p -- "$$dst"; continue; \
	  elif [ -L "$$n" ]; then \
	    t="$$(readlink "$$n")"; [ -n "$${t##$(CURDIR)/*}" ] || n="$$t"; \
	  fi; \
	  cp -a $(if $(VERBOSE),-v,) -- "$$n" "$$dst"; \
	done

clean:
	$(RM) -r -- $(build_prefix)

verify:
	find data features guess tools utils kmodule.deps.d -type f | \
	while read f; do \
	    ftype=$$(file -b "$$f"); \
	    [ -n "$${ftype##*shell script*}" ] || \
	    shellcheck -s dash -e SC1003,SC1090,SC1091,SC2004,SC2006,SC2015,SC2030,SC2031,SC2034,SC2086,SC2154 "$$f"; \
	done

name = $(subst -,_,$(notdir $@))
src = $($(name)_SRCS)
dst = $($(name)_DEST)
$(SCRIPTS): Makefile
	$(MKDIR_P) -- $(dir $@)
	$(SED) < $(src) > $(dst)
	$(TOUCH_R) $(src) $(dst)
	$(CHMOD) --reference=$(src) $(dst)

$(dest_rulesdir)/%.mk: mk/%.mk.in Makefile
	$(MKDIR_P) -- $(dir $@)
	$(SED) < $< > $@

$(dest_man1dir)/%.1: man/%.1.inc Makefile
	$(MKDIR_P) -- $(dir $@)
	$(HELP2MAN) -i $< -- $(notdir $*) >$@

$(dest_projectdir)/%: % Makefile
	$(MKDIR_P) -- $(dir $@)
	$(RM) -- "$@"
	$(LN_S) -- "$(CURDIR)/$(notdir $@)" "$@"

$(dest_sysconfdir)/%: conf/% Makefile
	$(MKDIR_P) -- $(dir $@)
	$(CP) -- $< $@

name = $(subst -,_,$(notdir $@))
objects = $(call get_objects,$($(name)_SRCS))
$(dest_bindir)/% $(dest_sbindir)/% $(dest_execdir)/% $(dest_data_bindir)/% $(dest_data_sbindir)/%:
	$(MKDIR_P) -- $(dir $@)
	$(LINK) $(objects) -o $@ $($(name)_LIBS)

cflags = $($(subst -,_,$(notdir $*))_c_CFLAGS)
$(OBJDIR)/%.o: %.c Makefile
	$(MKDIR_P) -- $(dir $@)
	$(COMPILE) $(cflags) $(OUTPUT_OPTION) $<

cflags = $($(subst -,_,$(notdir $*))_c_CFLAGS)
$(OBJDIR)/%.d: %.c Makefile
	$(MKDIR_P) -- $(dir $@)
	$(DEP) -MM $(cflags) $(CPPFLAGS) $(CFLAGS) $< | \
	  sed -e 's,\($(notdir $*)\)\.o[ :]*,$(@:.d=.o) $@: Makefile ,g' >$@

ifeq ($(filter verify clean,$(MAKECMDGOALS)),)
-include $(DEPS)
endif
