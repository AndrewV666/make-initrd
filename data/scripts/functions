#!/bin/sh

verbose() {
	[ -n "$QUIET" ] || echo "$@"
}

shell() {
	# Disallow console access
	[ "$PANIC" != 0 ] || reboot

	modprobe -q i8042
	modprobe -q atkbd
	echo "$@"
	PS1='(initramfs) ' /bin/sh -i </dev/console >/dev/console 2>&1
}

run_scripts() {
	local s
	for s in /scripts/"$1"/*; do
		[ -x "$s" ] || continue
		verbose "Running $s ..."
		. "$s"
	done
}

load_modules() {
	[ ! -e /conf/modules-"$1" ] ||
	while read m; do
		[ -n "${m##\#*}" ] || continue
		modprobe -q $m
	done < /conf/modules-"$1"
}

# wait_for_device <filename> <text>
wait_device() {
	[ ! -e "$1" ] || return 0
	verbose "$2"

	# Default delay is 180s
	sec=$(( ${ROOTDELAY:-180} * 10 ))
	while [ "$sec" -gt 0 ] && [ ! -e "$1" ]; do
		/bin/sleep 0.1
		sec=$(( $sec - 1 ))
	done
	[ -e "$1" ] || return 1
}

configure_network() {
	# networking already configured thus bail out
	[ -n "$DEVICE" ] && [ -e /tmp/net-"$DEVICE".conf ] && return 0

	# support ip options see linux sources Documentation/nfsroot.txt
	case "$IPOPTS" in
		none|off)
			# Do nothing
			;;
		""|on|any)
			# Bring up device
			ipconfig "$DEVICE"
			;;
		dhcp|bootp|rarp|both)
			ipconfig -c "$IPOPTS" -d "$DEVICE"
			;;
		*)
			ipconfig -d "$IPOPTS"

			# grab device entry from ip option
			NEW_DEVICE="${IPOPTS#*:*:*:*:*:*}"
			if [ "$NEW_DEVICE" != "$IPOPTS" ]; then
				NEW_DEVICE="${NEW_DEVICE%:*}"
			else
				# wrong parse, possibly only a partial string
				NEW_DEVICE=
			fi
			if [ -n "$NEW_DEVICE" ]; then
				DEVICE="$NEW_DEVICE"
			fi
			;;
	esac

	# source relevant ipconfig output
	. /tmp/net-${DEVICE}.conf
}
